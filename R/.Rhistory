leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
addProviderTiles("Stamen.TonerBackground") %>%
# addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addCircleMarkers(
data =  bridgesAsfinag, color = "green", radius = 3, opacity = 0.8,
popup =paste0(bridgesAsfinag$Objektbezeichnung, ": ", as.character(bridgesAsfinag$Lastbeschraenkung_qualitativ)),
labelOptions = labelOptions(noHide = TRUE, offset = c(0, -12), textOnly = TRUE)
)
styler:::style_active_file()
library(tidyverse)
library(sf)
library(ggmap) # downloading raster maps from a variety of sources
library(ggspatial) # map backgrounds and annotations for ggplot
library(tmap) # static/interactive map library with ggplot-like syntax
library(osmdata) # obtaining OpenStreetMap vector data
library(units) # working with units
library(mapview) # interactive geometry viewing
library(ggiraph)
library(ggplot2)
library(leaflet)
DISTANCE <- units::set_units(10, m)
# Set working directory to location of git
setwd("C:\\Git\\BridgeCapacities\\")
# Relative File Paths
roadnetwork_file <- ".\\Data\\Verkehrsnetz Kärnten\\Verkehrsnetz inkl. Autobahnen\\Strassennetz.dbf"
bridges_file <- ".\\Data\\Brücken\\Bruecken_Point_14042021.dbf"
focus_file <- ".\\Data\\Verkehrsnetz Kärnten\\Verkehrsnetz inkl. Autobahnen\\EVIS_Fokusstreckennetz.dbf"
segmente_file <- ".\\Data\\Verkehrsnetz Kärnten\\Verkehrsnetz inkl. Autobahnen\\Verkehrslagesegmente.dbf"
asfinag_file <- ".\\Data\\Brücken\\Bruecken_Asfinag.csv"
# Load Files
roadnetwork <- st_read(roadnetwork_file, layer = "Strassennetz")
focus <- st_read(focus_file)
segmente <- st_read(segmente_file)
bridgesP <- st_read(bridges_file)
bridgesAsfinag <- as_tibble(read.csv2(asfinag_file)) %>%
rename(longitude = WGS_X) %>%
rename(latitude = WGS_Y)
# filter Bridges next to "roadnetwork"
z <- st_join(roadnetwork, st_zm(bridgesP), st_is_within_distance, dist = DISTANCE, suffix = c(".road", ".bridge"), left = TRUE)
z %>%
select(FEATURENAM, OBJECTID.road, BR_NAME, OBJECTID.bridge, MAXLAST) %>%
filter(!is.na(OBJECTID.bridge))
bide <- z %>%
select(OBJECTID.bridge) %>%
filter(!is.na(OBJECTID.bridge)) %>%
unique()
bridgeIds <- unique(bide$OBJECTID.bridge)
BridgesP_AS <- bridgesP %>% filter(OBJECTID %in% bridgeIds)
# plot with ggplot()
ggplot() +
geom_sf(data = st_transform(roadnetwork, crs = 3857)[1], color = "red") +
geom_sf(data = segmente, color = "green") +
geom_sf(data = focus, color = "yellow") +
geom_sf(data = BridgesP_AS, color = "blue", size = 1, shape = 1)
# Plot with leaflet
leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
addProviderTiles("Stamen.TonerBackground") %>%
# addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolylines(data = st_transform(roadnetwork, crs = 4326), fill = NA, color = "red") %>%
addPolylines(data = st_transform(segmente, crs = 4326), fill = NA, color = "green") %>%
addPolylines(data = st_transform(focus, crs = 4326), fill = NA, color = "blue") %>%
addCircleMarkers(data = st_transform(BridgesP_AS, crs = 4326), color = "yellow", radius = 3, opacity = 1) %>%
addCircleMarkers(
data = st_transform(bridgesP, crs = 4326), color = "orange", radius = 3, opacity = 0.8, label = ~ as.character(MAXLAST),
popup = paste0(bridgesP$BR_NAME, ": ", as.character(bridgesP$MAXLAST)),
labelOptions = labelOptions(noHide = TRUE, offset = c(0, -12), textOnly = TRUE)
) %>%
addCircleMarkers(
data = bridgesAsfinag, color = "green", radius = 3, opacity = 0.8,
popup = paste0(bridgesAsfinag$Objektbezeichnung, ": ", as.character(bridgesAsfinag$Lastbeschraenkung_qualitativ)),
labelOptions = labelOptions(noHide = TRUE, offset = c(0, -12), textOnly = TRUE)
)
# http://postgis.net/workshops/postgis-intro/spatial_relationships.html
# https://stackoverflow.com/questions/43463150/print-label-on-circle-markers-in-leaflet-in-rshiny
# http://leaflet-extras.github.io/leaflet-providers/preview/
library(htmlwidgets)
# Plot with leaflet
f<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
addProviderTiles("Stamen.TonerBackground") %>%
# addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolylines(data = st_transform(roadnetwork, crs = 4326), fill = NA, color = "red") %>%
addPolylines(data = st_transform(segmente, crs = 4326), fill = NA, color = "green") %>%
addPolylines(data = st_transform(focus, crs = 4326), fill = NA, color = "blue") %>%
addCircleMarkers(data = st_transform(BridgesP_AS, crs = 4326), color = "yellow", radius = 3, opacity = 1) %>%
addCircleMarkers(
data = st_transform(bridgesP, crs = 4326), color = "orange", radius = 3, opacity = 0.8,
popup = paste0(bridgesP$BR_NAME, ": ", as.character(bridgesP$MAXLAST)),
labelOptions = labelOptions(noHide = TRUE, offset = c(0, -12), textOnly = TRUE)
) %>%
addCircleMarkers(
data = bridgesAsfinag, color = "green", radius = 3, opacity = 0.8,
popup = paste0(bridgesAsfinag$Objektbezeichnung, ": ", as.character(bridgesAsfinag$Lastbeschraenkung_qualitativ)),
labelOptions = labelOptions(noHide = TRUE, offset = c(0, -12), textOnly = TRUE)
)
f
saveWidget(f,  "bridges.html",  selfcontained = TRUE)
library(tidyverse)
library(sf)
library(ggmap) # downloading raster maps from a variety of sources
library(ggspatial) # map backgrounds and annotations for ggplot
library(tmap) # static/interactive map library with ggplot-like syntax
library(osmdata) # obtaining OpenStreetMap vector data
library(units) # working with units
library(mapview) # interactive geometry viewing
library(ggiraph)
library(ggplot2)
library(leaflet)
library(htmlwidgets)
DISTANCE <- units::set_units(10, m)
# Set working directory to location of git
setwd("C:\\Git\\BridgeCapacities\\")
# Relative File Paths
roadnetwork_file <- ".\\Data\\Verkehrsnetz Kärnten\\Verkehrsnetz inkl. Autobahnen\\Strassennetz.dbf"
bridges_file <- ".\\Data\\Brücken\\Bruecken_Point_14042021.dbf"
focus_file <- ".\\Data\\Verkehrsnetz Kärnten\\Verkehrsnetz inkl. Autobahnen\\EVIS_Fokusstreckennetz.dbf"
segmente_file <- ".\\Data\\Verkehrsnetz Kärnten\\Verkehrsnetz inkl. Autobahnen\\Verkehrslagesegmente.dbf"
asfinag_file <- ".\\Data\\Brücken\\Bruecken_Asfinag.csv"
# Boundary
bound.land_kaernten <- getbb("Kärnten, Austria",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
# Load Files
roadnetwork <- st_read(roadnetwork_file, layer = "Strassennetz")
focus <- st_read(focus_file)
segmente <- st_read(segmente_file)
bridgesP <- st_read(bridges_file)
bridgesAsfinag <- as_tibble(read.csv2(asfinag_file)) %>%
rename(longitude = WGS_X) %>%
rename(latitude = WGS_Y)
# filter Bridges next to "roadnetwork"
z <- st_join(roadnetwork, st_zm(bridgesP), st_is_within_distance, dist = DISTANCE, suffix = c(".road", ".bridge"), left = TRUE)
z %>%
select(FEATURENAM, OBJECTID.road, BR_NAME, OBJECTID.bridge, MAXLAST) %>%
filter(!is.na(OBJECTID.bridge))
bide <- z %>%
select(OBJECTID.bridge) %>%
filter(!is.na(OBJECTID.bridge)) %>%
unique()
bridgeIds <- unique(bide$OBJECTID.bridge)
BridgesP_AS <- bridgesP %>% filter(OBJECTID %in% bridgeIds)
# plot with ggplot()
ggplot() +
geom_sf(data = st_transform(roadnetwork, crs = 3857)[1], color = "red") +
geom_sf(data = segmente, color = "green") +
geom_sf(data = focus, color = "yellow") +
geom_sf(data = BridgesP_AS, color = "blue", size = 1, shape = 1)
# Plot with leaflet
f<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.land_kaernten, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = st_transform(roadnetwork, crs = 4326), fill = NA, color = "red") %>%
addPolylines(data = st_transform(segmente, crs = 4326), fill = NA, color = "green") %>%
addPolylines(data = st_transform(focus, crs = 4326), fill = NA, color = "blue") %>%
addCircleMarkers(data = st_transform(BridgesP_AS, crs = 4326), color = "yellow", radius = 3, opacity = 1) %>%
addCircleMarkers(
data = st_transform(bridgesP, crs = 4326), color = "orange", radius = 3, opacity = 0.8,
popup = paste0(bridgesP$BR_NAME, ": ", as.character(bridgesP$MAXLAST)),
labelOptions = labelOptions(noHide = TRUE, offset = c(0, -12), textOnly = TRUE)
) %>%
addCircleMarkers(
data = bridgesAsfinag, color = "green", radius = 3, opacity = 0.8,
popup = paste0(bridgesAsfinag$Objektbezeichnung, ": ", as.character(bridgesAsfinag$Lastbeschraenkung_qualitativ)),
labelOptions = labelOptions(noHide = TRUE, offset = c(0, -12), textOnly = TRUE)
)
saveWidget(f,  "bridges.html",  selfcontained = TRUE)
# http://postgis.net/workshops/postgis-intro/spatial_relationships.html
# https://stackoverflow.com/questions/43463150/print-label-on-circle-markers-in-leaflet-in-rshiny
# http://leaflet-extras.github.io/leaflet-providers/preview/
f
source("helperFunctions.R")
setwd("C:\\Git\\BridgeCapacities\\")
source("helperFunctions.R")
source(".\\R\helperFunctions.R")
source(".\\R\\helperFunctions.R")
highway.motorway<- query(key="highway", value="motorway", bbox=bound.land_kaernten)
highway.primary<- query(key="highway", value="primary", bbox=bound.land_kaernten)
highway.secondary<- query(key="highway", value="secondary", bbox=bound.land_kaernten)
highway.tertiary<- query(key="highway", value="tertiary", bbox=bound.land_kaernten)
highway.motorway
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.land_kaernten, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = highway.motorway, fill = NA, color = "red") %>%
addPolylines(data = highway.primary, fill = NA, color = "orange") %>%
addPolylines(data = highway.secondary, fill = NA, color = "yellow")
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.land_kaernten, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = highway.motorway, fill = NA, color = "red") %>%
addPolylines(data = highway.primary, fill = NA, color = "orange")
# Plot with leaflet
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.land_kaernten, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = highway.motorway$osm_lines, fill = NA, color = "red") %>%
addPolylines(data = highway.primary$osm_lines, fill = NA, color = "orange")
roads
st_write(highway.primary$osm_lines, "primary.csv")
st_write(highway.primary$osm_lines, "primary.csv" , layer_options = "GEOMETRY=AS_XY")
st_write(highway.primary$osm_lines, "primary.csv" , layer_options = "GEOMETRY=AS_XY")
highway.trunk<- query(key="highway", value="trunk", bbox=bound.land_kaernten)
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.land_kaernten, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = highway.motorway$osm_lines, fill = NA, color = "red") %>%
addPolylines(data = highway.trunk$osm_lines, fill = NA, color = "blue") %>%
addPolylines(data = highway.primary$osm_lines, fill = NA, color = "orange")
roads
library(tidyverse)
library(sf)
library(ggmap) # downloading raster maps from a variety of sources
library(ggspatial) # map backgrounds and annotations for ggplot
library(tmap) # static/interactive map library with ggplot-like syntax
library(osmdata) # obtaining OpenStreetMap vector data
library(units) # working with units
library(mapview) # interactive geometry viewing
library(ggiraph)
library(ggplot2)
library(leaflet)
library(htmlwidgets)
DISTANCE <- units::set_units(10, m)
# Set working directory to location of git
setwd("C:\\Git\\BridgeCapacities\\")
source(".\\R\\helperFunctions.R")
bound.veneto <- getbb("Veneto, Italy",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.land_kaernten, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5)
roads
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.veneto, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5)
roads
bound.fruili <- getbb("Friuli-Venezia Gulia, Italy",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
bound.fruili <- getbb("Friuli-Venezia, Italy",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
bound.fruili <- getbb("Friuli-Venezia, Italy",
featuretype = "state",
format_out = "sf_polygon"
)
bound.fruili
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.fruili, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5)
bound.fruili
bound.fruili <- getbb("Friuli, Italy",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
bridges<- query(key="bridge", value=available_tags("bridge"), bbox=bound.veneto)
bridges<- query(key="bridge", value=available_tags("bridge"), bbox=bound.veneto)
bridgesFruili<-bridges
bridgesFruili
bound.texas <- getbb("Texas, USA",
featuretype = "state",
format_out = "sf_polygon"
)
bound.texas
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.texas, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5)
roads
bridges.Texas<- query(key="bridge", value=available_tags("bridge"), bbox=bound.texas)
View(bridgesFruili$osm_lines)
bridgesFruili$osm_lines$maxweight
bridges.Veneto.filtered$osm_points <- bridges.Veneto$osm_points %>% select(osm_id, name, highway, maxweight, maxweight.signed, maxweight.source, maxweightrating)
bridges.Veneto<- query(key="bridge", value=available_tags("bridge"), bbox=bound.veneto)
bridges.Veneto.filtered$osm_points <- bridges.Veneto$osm_points %>% select(osm_id, name, highway, maxweight, maxweight.signed, maxweight.source, maxweightrating)
bridges.Veneto.filtered$osm_lines <- bridges.Veneto$osm_lines %>% select(osm_id, name, highway, maxweight, maxweight.signed, maxweight.source, maxweightrating)
bridges.Veneto.filtered <- bridges.Veneto$osm_lines %>% select(osm_id, name, highway, maxweight, maxweight.signed, maxweight.source, maxweightrating)
View(bridges.Veneto.filtered)
bridges.Veneto.filtered %>%filter(!is.na(maxweight))
bridges.Veneto.filtered
bridges.Veneto.filtered %>%filter(highway="motorway")
bridges.Veneto.filtered %>%filter(highway=="motorway")
bridges.Veneto.filtered %>%filter(!is.na(highway))  %>%filter(highway=="motorway")
bridges.Veneto.filtered %>%filter(!is.na(maxweight))  %>%filter(highway=="motorway")
bridges.Texas
bridges.Texas<- query(key="bridge", value=available_tags("bridge"), bbox=bound.texas)
bridges.Texas<- query(key="bridge", value=available_tags("bridge"), bbox=bound.texas)
briges.Veneto
bridges.Veneto
bridges.Veneto$osm_lines
bridges.Veneto.filtered <- bridges.Veneto$osm_lines %>% select(osm_id, name, highway, maxweight, maxweight.signed, maxweight.source, maxweightrating)
View(bridges.Veneto.filtered)
bridges.Veneto.filtered %>%filter(!is.na(maxweight))  %>%filter(highway=="motorway")
bridges.Veneto.filtered %>%filter(!is.na(maxweight))
View(bridges.Veneto.filtered %>%filter(!is.na(maxweight)) )
bound.texas <- getbb("Galveston,Texas, USA",
featuretype = "county",
format_out = "sf_polygon"
)
bound.texas <- getbb("Galveston,Texas, USA",
featuretype = "settelement",
format_out = "sf_polygon"
)
bound.texas <- getbb("Galveston, Texas, USA",
featuretype = "settelement",
format_out = "sf_polygon"
)
bound.texas <- getbb("Fort Worth, Texas, USA",
featuretype = "settelement",
format_out = "sf_polygon"
)
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.texas, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5)
bound.texas
bound.texas <- getbb("McLennan County, Texas, USA",
featuretype = "settelement",
format_out = "sf_polygon"
)
bound.texas
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.texas, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5)
roads
highway.motorway<- query(key="highway", value="motorway", bbox=bound.texas)
highway.trunk<- query(key="highway", value="trunk", bbox=bound.texas)
highway.primary<- query(key="highway", value="primary", bbox=bound.texas)
highway.secondary<- query(key="highway", value="secondary", bbox=bound.texas)
highway.tertiary<- query(key="highway", value="tertiary", bbox=bound.texas)
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.texas, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = highway.motorway$osm_lines, fill = NA, color = "red") %>%
addPolylines(data = highway.trunk$osm_lines, fill = NA, color = "blue") %>%
addPolylines(data = highway.primary$osm_lines, fill = NA, color = "orange") %>%
addPolylines(data = highway.secondary$osm_lines, fill = NA, color = "yellow")
addPolylines(data = highway.tertiary$osm_lines, fill = NA, color = "green")
# Plot with leaflet
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.texas, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = highway.motorway$osm_lines, fill = NA, color = "red") %>%
addPolylines(data = highway.trunk$osm_lines, fill = NA, color = "blue") %>%
addPolylines(data = highway.primary$osm_lines, fill = NA, color = "orange") %>%
addPolylines(data = highway.secondary$osm_lines, fill = NA, color = "yellow") %>%
addPolylines(data = highway.tertiary$osm_lines, fill = NA, color = "green")
roads
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
# setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.texas, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = highway.motorway$osm_lines, fill = NA, color = "red") %>%
addPolylines(data = highway.trunk$osm_lines, fill = NA, color = "blue") %>%
addPolylines(data = highway.primary$osm_lines, fill = NA, color = "orange") %>%
addPolylines(data = highway.secondary$osm_lines, fill = NA, color = "yellow") %>%
addPolylines(data = highway.tertiary$osm_lines, fill = NA, color = "green")
roads
bridges.<- query(key="bridge", value=available_tags("bridge"), bbox=bound.texas)
bridges<-bridges.
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
# setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.texas, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = highway.motorway$osm_lines, fill = NA, color = "red") %>%
addPolylines(data = highway.trunk$osm_lines, fill = NA, color = "blue") %>%
addPolylines(data = highway.primary$osm_lines, fill = NA, color = "orange") %>%
addPolylines(data = highway.secondary$osm_lines, fill = NA, color = "yellow") %>%
addPolylines(data = highway.tertiary$osm_lines, fill = NA, color = "green") %>%
addPolylines(data = bridges$osm_lines, fill = NA, color = "gray")
roads
roads<- leaflet() %>%
# addProviderTiles("BasemapAT.grau") %>%
# addProviderTiles("Stamen.TerrainBackground") %>%
# addProviderTiles("Stamen.TonerBackground") %>%
addTiles() %>%
# setView(14.3122, 46.636, zoom = 9) %>%
addMeasure() %>%
addScaleBar() %>%
addPolygons(data = bound.texas, fillOpacity = 0.3, weight = 1.2, color = "#444444", smoothFactor = 0.5) %>%
addPolylines(data = highway.motorway$osm_lines, fill = NA, color = "red") %>%
addPolylines(data = highway.trunk$osm_lines, fill = NA, color = "blue") %>%
addPolylines(data = highway.primary$osm_lines, fill = NA, color = "orange") %>%
addPolylines(data = highway.secondary$osm_lines, fill = NA, color = "yellow") %>%
addPolylines(data = highway.tertiary$osm_lines, fill = NA, color = "green") %>%
addPolylines(data = bridges$osm_lines, fill = NA, color = "black")
roads
View(bridges$osm_lines)
bridges.filtered <- bridges.$osm_lines %>% select(osm_id, name, highway, maxspeed,maxweight, maxweight.signed, maxweight.source, maxweightrating)
bridges.filtered <- bridges.$osm_lines %>% select(osm_id, name, highway, maxspeed, maxweight, maxweight.signed, maxweight.source, maxweightrating)
bridges$osm_multilines
View(bridges)
View(bridges$osm_lines)
bridges.filtered %>%filter(highway=="motorway")
bridges%>%filter(highway=="motorway")
bridges %>% filter(highway=="motorway")
bridges$osm_lines %>% filter(highway=="motorway")
bound.land_kaernten <- getbb("Kärnten, Austria",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
highway.motorway<- query(key="highway", value="motorway", bbox=bound.land_kaernten)
highway.trunk<- query(key="highway", value="trunk", bbox=bound.land_kaernten)
View(highway.motorway)
View(highway.motorway$osm_lines)
tunnel<- query(key="tunnel", value=available_tags("tunnel"), bbox=bound.land_kaernten)
View(tunnel)
View(tunnel$osm_lines)
