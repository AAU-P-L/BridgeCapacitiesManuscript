addPolylines(data = selected_route, fillOpacity = 0.9, weight = 5, color = "red", smoothFactor = 0.5, group = "path") %>%
addAwesomeMarkers(data = nodes.source.geom, icon = icoLst$start, group = "start/end") %>%
addAwesomeMarkers(data = nodes.destination.geom, icon = icoLst$finish, group = "start/end") %>%
addLayersControl(
baseGroups = c("OSM", "Stamen", "StamenLite"),
overlayGroups = c("motorway", "primary", "secondary", "tertiary", "unclassified",  "path", "start/end"),
options = layersControlOptions(collapsed = TRUE)
) %>%
hideGroup("network")
saveWidget(roads, "path.html", selfcontained = TRUE)
roads <- leaflet() %>%
addProviderTiles(providers$Stamen.Toner, group = "Stamen") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "StamenLite") %>%
addTiles(group = "OSM") %>%
addTiles() %>%
addMeasure() %>%
addScaleBar() %>%
addPolylines(data = network %>% filter(highway %in% c("motorway", "trunk", "motorway_link", "trunk_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "motorway") %>%
addPolylines(data = network %>% filter(highway %in% c("secondary", "secondary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "secondary") %>%
addPolylines(data = network %>% filter(highway %in% c("primary", "primary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "primary") %>%
addPolylines(data = network %>% filter(highway %in% c("tertiary", "tertiary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "tertiary") %>%
addPolylines(data = network %>% filter(highway %in% c("unclassified")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "unclassified") %>%
addPolylines(data = network, fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "network") %>%
addPolylines(data = selected_route, fillOpacity = 0.9, weight = 5, color = "red", smoothFactor = 0.5, group = "path") %>%
addAwesomeMarkers(data = nodes.source.geom, icon = icoLst$start, group = "start/end") %>%
addAwesomeMarkers(data = nodes.destination.geom, icon = icoLst$finish, group = "start/end") %>%
addLayersControl(
baseGroups = c("OSM", "Stamen", "StamenLite"),
overlayGroups = c("motorway", "primary", "secondary", "tertiary", "unclassified",  "path", "start/end"),
options = layersControlOptions(collapsed = TRUE)
) %>%
hideGroup("motorway") %>%
hideGroup("primary") %>%
hideGroup("secondary") %>%
hideGroup("tertiary") %>%
hideGroup("unclassified")
saveWidget(roads, "path.html", selfcontained = TRUE)
roads <- leaflet() %>%
addProviderTiles(providers$Stamen.Toner, group = "Stamen") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "StamenLite") %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Gray") %>%
addTiles(group = "OSM") %>%
addTiles() %>%
addMeasure() %>%
addScaleBar() %>%
addPolylines(data = network %>% filter(highway %in% c("motorway", "trunk", "motorway_link", "trunk_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "motorway") %>%
addPolylines(data = network %>% filter(highway %in% c("secondary", "secondary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "secondary") %>%
addPolylines(data = network %>% filter(highway %in% c("primary", "primary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "primary") %>%
addPolylines(data = network %>% filter(highway %in% c("tertiary", "tertiary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "tertiary") %>%
addPolylines(data = network %>% filter(highway %in% c("unclassified")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "unclassified") %>%
addPolylines(data = network, fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "network") %>%
addPolylines(data = selected_route, fillOpacity = 0.9, weight = 5, color = "red", smoothFactor = 0.5, group = "path") %>%
addAwesomeMarkers(data = nodes.source.geom, icon = icoLst$start, group = "start/end") %>%
addAwesomeMarkers(data = nodes.destination.geom, icon = icoLst$finish, group = "start/end") %>%
addLayersControl(
baseGroups = c("OSM", "Stamen", "StamenLite" ,"Gray"),
overlayGroups = c("motorway", "primary", "secondary", "tertiary", "unclassified",  "path", "start/end"),
options = layersControlOptions(collapsed = TRUE)
) %>%
hideGroup("motorway") %>%
hideGroup("primary") %>%
hideGroup("secondary") %>%
hideGroup("tertiary") %>%
hideGroup("unclassified")
roads <- leaflet() %>%
addProviderTiles(providers$Stamen.Toner, group = "Stamen") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "StamenLite") %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Gray") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satelite") %>%
addTiles(group = "OSM") %>%
addTiles() %>%
addMeasure() %>%
addScaleBar() %>%
addPolylines(data = network %>% filter(highway %in% c("motorway", "trunk", "motorway_link", "trunk_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "motorway") %>%
addPolylines(data = network %>% filter(highway %in% c("secondary", "secondary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "secondary") %>%
addPolylines(data = network %>% filter(highway %in% c("primary", "primary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "primary") %>%
addPolylines(data = network %>% filter(highway %in% c("tertiary", "tertiary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "tertiary") %>%
addPolylines(data = network %>% filter(highway %in% c("unclassified")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "unclassified") %>%
addPolylines(data = network, fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "network") %>%
addPolylines(data = selected_route, fillOpacity = 0.9, weight = 5, color = "red", smoothFactor = 0.5, group = "path") %>%
addAwesomeMarkers(data = nodes.source.geom, icon = icoLst$start, group = "start/end") %>%
addAwesomeMarkers(data = nodes.destination.geom, icon = icoLst$finish, group = "start/end") %>%
addLayersControl(
baseGroups = c("OSM", "Stamen", "StamenLite" ,"Gray", "Satelite"),
overlayGroups = c("motorway", "primary", "secondary", "tertiary", "unclassified",  "path", "start/end"),
options = layersControlOptions(collapsed = TRUE)
) %>%
hideGroup("motorway") %>%
hideGroup("primary") %>%
hideGroup("secondary") %>%
hideGroup("tertiary") %>%
hideGroup("unclassified")
saveWidget(roads, "path.html", selfcontained = TRUE)
roads <- leaflet() %>%
addProviderTiles(providers$Stamen.Toner, group = "Stamen") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "StamenLite") %>%
addProviderTiles(providers$Esri.WorldGrayCanvas, group = "Gray") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satelite") %>%
addTiles(group = "OSM") %>%
addTiles() %>%
addMeasure() %>%
addScaleBar() %>%
addPolylines(data = network %>% filter(highway %in% c("motorway", "trunk", "motorway_link", "trunk_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "motorway") %>%
addPolylines(data = network %>% filter(highway %in% c("secondary", "secondary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "secondary") %>%
addPolylines(data = network %>% filter(highway %in% c("primary", "primary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "primary") %>%
addPolylines(data = network %>% filter(highway %in% c("tertiary", "tertiary_link")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "tertiary") %>%
addPolylines(data = network %>% filter(highway %in% c("unclassified")), fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "unclassified") %>%
addPolylines(data = network, fillOpacity = 0.3, weight = 2, color = "#444444", smoothFactor = 0.5, group = "network") %>%
addPolylines(data = selected_route, fillOpacity = 0.9, weight = 5, color = "red", smoothFactor = 0.5, group = "path") %>%
addAwesomeMarkers(data = nodes.source.geom, icon = icoLst$start, group = "start/end") %>%
addAwesomeMarkers(data = nodes.destination.geom, icon = icoLst$finish, group = "start/end") %>%
addLayersControl(
baseGroups = c("OSM", "Stamen", "StamenLite" ,"Gray", "Satelite"),
overlayGroups = c("motorway", "primary", "secondary", "tertiary", "unclassified",  "path", "start/end"),
options = layersControlOptions(collapsed = TRUE)
) %>%
hideGroup("motorway") %>%
hideGroup("primary") %>%
hideGroup("secondary") %>%
hideGroup("tertiary") %>%
hideGroup("unclassified")
roads
saveWidget(roads, "path.html", selfcontained = TRUE)
shiny::runApp('063-superzip-example')
runApp('063-superzip-example')
runApp('C:/Git/BridgeCapacities/R/shinyDev')
runApp('shinyDev')
runApp()
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp()
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp()
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
styler:::style_active_file()
runApp('shinyDev')
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
node.source=1
library(sfnetworks)
library(sf)
library(tidygraph)
library(tidyverse)
library(TSP)
library(fontawesome)
library(tidyverse)
library(sf)
library(ggmap) # downloading raster maps from a variety of sources
library(ggspatial) # map backgrounds and annotations for ggplot
library(tmap) # static/interactive map library with ggplot-like syntax
library(osmdata) # obtaining OpenStreetMap vector data
library(units) # working with units
library(mapview) # interactive geometry viewing
library(ggiraph)
library(ggplot2)
library(leaflet)
library(htmlwidgets)
library(tidyverse)
# http://switchfromshapefile.org/
bbox <- getbb("Kärnten, Austria",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
########### 1.  Retrieve Road Network, clean, and store locally ###################
bbox_to_string(bbox)
# https://wiki.openstreetmap.org/wiki/Key:highway
# dput(available_tags("highway"))
tags <- c(
"motorway", "trunk", "primary", "secondary", "tertiary", "unclassified",
"motorway_link", "trunk_link", "primary_link", "secondary_link", "tertiary_link"
)
# st_read
# st_write
########## 1. Get road network
query <- opq(bbox = bbox, timeout = 500) %>%
add_osm_feature(key = "highway", value = tags)
features <- osmdata_sf(query)
features<- trim_osmdata(features, bbox)
## Select a
not_all_na <- function(x) any(!is.na(x))
not_any_na <- function(x) all(!is.na(x))
network<- features$osm_lines %>% select(where(not_all_na))
# select(where(not_any_na))
# Write to file
st_write(network, "osm_road_network_carinthia.gpkg", driver = "gpkg")
########### 2. Load Network from file, Convert to Graph represenation ###################
network<- st_read("osm_road_network_carinthia.gpkg")
net <- as_sfnetwork(network, directed = TRUE) %>%
# st_transform(3035) %>%
### Set weights
net <- net %>%   activate("edges") %>%  mutate(weight = st_length(geometry))
## Check lengths
net %>%   activate("edges") %>% select(weight)
node.source=1
node.destination=12334
paths <- st_network_paths(net, from = node.source, to = node.destination,   type = "shortest")
nodes.source.geom <- net %>%
activate("nodes") %>%
st_as_sf() %>%
slice(node.source)
nodes.destination.geom <- net %>%
activate("nodes") %>%
st_as_sf() %>%
slice(node.destination)
nodes.source.geom <- net %>%
activate("nodes") %>%
st_as_sf() %>%
slice(node.source)
nodes.destination.geom <- net %>%
activate("nodes") %>%
st_as_sf() %>%
slice(node.destination)
network<- st_read("osm_road_network_carinthia.gpkg")
net <- as_sfnetwork(network, directed = TRUE) %>%
# st_transform(3035) %>%
### Set weights
net <- net %>%   activate("edges") %>%  mutate(weight = st_length(geometry))
## Check lengths
net %>%   activate("edges") %>% select(weight)
node.source=1
node.destination=12334
paths <- st_network_paths(net, from = node.source, to = node.destination,   type = "shortest")
net <- as_sfnetwork(network, directed = TRUE)
nodes.source.geom <- net %>%
activate("nodes") %>%
st_as_sf() %>%
slice(node.source)
nodes.destination.geom <- net %>%
activate("nodes") %>%
st_as_sf() %>%
slice(node.destination)
nodes.source.geom
nodes.destination.geom
runApp('shinyDev')
st_as_sf(13.94441, 46.62183)
sites <- data.frame(longitude = c(13.94441, 14.44728), latitude = c(46.62183,46.84006)))
sites <- data.frame(longitude = c(13.94441, 14.44728), latitude = c(46.62183,46.84006))
sites <- st_as_sf(sites, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant"))
sites <- st_as_sf(sites, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant")
sites
site.source <- sites[1]
site.dest <- sites[2]
site.source <- sites[1,]
site.source
styler:::style_active_file()
runApp('shinyDev')
shiny::runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
last_error()
rlagn::last_error()
rlang::last_error()
library(sf)
library(sfnetworks)
library(dplyr)
network <- st_read("data/osm_road_network_carinthia.gpkg")
sites <- data.frame(longitude = c(13.94441, 14.44728), latitude = c(46.62183,46.84006))
sites <- st_as_sf(sites, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant")
site.source <- sites[1,]
site.dest <- sites[2,]
getwd(9)
getwd()
network <- st_read("shinyDev/data/osm_road_network_carinthia.gpkg")
sites <- data.frame(longitude = c(13.94441, 14.44728), latitude = c(46.62183,46.84006))
sites <- st_as_sf(sites, coords = c("longitude", "latitude"),
crs = 4326, agr = "constant")
site.source <- sites[1,]
site.dest <- sites[2,]
getShortestPath <- function(network){
net <- as_sfnetwork(network, directed = TRUE)
net <- net %>%   activate("edges") %>%  mutate(weight = st_length(geometry))
net %>%   activate("edges") %>% select(weight)
paths <- st_network_paths(net, from = site.source, to = site.dest,   type = "shortest")
selected_edges <-
paths %>%
pull(edge_paths) %>%
unlist()
selected_route <- net %>%
activate("edges") %>%
st_as_sf() %>%
slice(selected_edges)
return(selected_route)
}
route <- getShortestPath(network)
net <- as_sfnetwork(network, directed = TRUE)
net <- net %>%   activate("edges") %>%  mutate(weight = st_length(geometry))
net
net$geometry
net
net$geom
net$geometry
network<- st_read("osm_road_network_carinthia.gpkg")
net <- as_sfnetwork(network, directed = TRUE)
net <- net %>%   activate("edges") %>%  mutate(weight = st_length(geometry))
net
net %>% activate("edges")
net <- as_sfnetwork(network, directed = TRUE) %>%
activate("edges") %>%  mutate(weight = st_length(geometry))
net <- as_sfnetwork(network, directed = TRUE)
net
net <- net %>%   activate("edges") %>%  mutate(weight = st_length())
net <- net %>%   activate("edges") %>%  mutate(weight = edge_length())
edge_length()
edge_length()
edge_length
runApp('shinyDev')
runApp()
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
runApp('shinyDev')
route$lenght
route$lenght
route$lenght
runApp('shinyDev')
route$lenght
st_as_text(route$lenght)
st_as_text(route$lenght)
t<- route$lenght
t
typeof(t)
as.character(t)
t$Units
t[num]
t$num
as.double(t)
round(as.double(t),1)
runApp('shinyDev')
network<- st_read("osm_road_network_carinthia.gpkg")
net <- as_sfnetwork(network, directed = TRUE)
# st_transform(3035) %>%
### Set weights
net <- net %>%   activate("edges") %>%  mutate(weight = edge_length())
## Check lengths
net %>%   activate("edges") %>% select(weight)
library(sfnetworks)
library(sf)
library(tidygraph)
library(tidyverse)
library(TSP)
library(tidyverse)
library(sf)
library(ggmap) # downloading raster maps from a variety of sources
library(ggspatial) # map backgrounds and annotations for ggplot
library(tmap) # static/interactive map library with ggplot-like syntax
library(osmdata) # obtaining OpenStreetMap vector data
library(units) # working with units
library(mapview) # interactive geometry viewing
library(ggiraph)
library(ggplot2)
library(leaflet)
library(htmlwidgets)
library(tidyverse)
network<- st_read("osm_road_network_carinthia.gpkg")
net <- as_sfnetwork(network, directed = TRUE)
# st_transform(3035) %>%
### Set weights
net <- net %>%   activate("edges") %>%  mutate(weight = edge_length())
## Check lengths
net %>%   activate("edges") %>% select(weight)
node.source=1
node.destination=12334
paths <- st_network_paths(net, from = node.source, to = node.destination,   type = "shortest")
network
net
net <- net %>%   activate("edges") %>%  mutate(weight = edge_length())
node.source=1
node.destination=12334
paths <- st_network_paths(net, from = node.source, to = node.destination,   type = "shortest")
paths
network
net
paths
selected_edges <-
paths %>%
pull(edge_paths) %>%
unlist()
selcted
selected_edges
selected_route <- net %>%
activate("edges") %>%
st_as_sf() %>%
slice(selected_edges)
selected_route
length <- st_length(selected_route) %>% sum()
length
shiny::runApp('shinyDev')
citation()
citation("leaflet")
citation("shiny")
runApp('shinyDev')
library(sfnetworks)
library(sf)
library(tidygraph)
library(tidyverse)
library(TSP)
library(tidyverse)
library(sf)
library(ggmap) # downloading raster maps from a variety of sources
library(ggspatial) # map backgrounds and annotations for ggplot
library(tmap) # static/interactive map library with ggplot-like syntax
library(osmdata) # obtaining OpenStreetMap vector data
library(units) # working with units
library(mapview) # interactive geometry viewing
library(ggiraph)
library(ggplot2)
library(leaflet)
library(htmlwidgets)
library(tidyverse)
bbox.veneto <- getbb("Veneto, Italy",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
bbox.friuli<- getbb("friuli-venezia giulia, Italy",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
bbox.friuli<- getbb("friuli-venezia giulia, Italy",
featuretype = "state",
format_out = "sf_polygon"
)
bbox.friuli
bbox.veneto <- getbb("Veneto, Italy",
featuretype = "state",
format_out = "sf_polygon"
)
bbox.veneto
bbox.veneto <- getbb("Veneto, Italy",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
bbox.veneto
poly <- leaflet() %>%
addPolygons(bbox) %>%
addPolygons(bbox.veneto) %>%
addPolygons(bbox.friuli)
poly <- leaflet() %>%
addPolygons(data=bbox)
bbox <- getbb("Kärnten, Austria",
featuretype = "state",
format_out = "sf_polygon"
)[1, 1]
poly <- leaflet() %>%
addPolygons(data=bbox)
poly
poly <- leaflet() %>%
addTiles()%>%
addPolygons(data=bbox) %>%
addPolygons(data=bbox.veneto) %>%
addPolygons(data=bbox.friuli)
poly <- leaflet() %>%
addTiles()%>%
addPolygons(data=bbox) %>%
addPolygons(data=bbox.veneto)
poly
bbox.friuli<- getbb("Friuli-Venezia Giulia, Italy",
featuretype = "state",
format_out = "sf_polygon"
)
bbox.friuli
poly <- leaflet() %>%
addTiles()%>%
addPolygons(data=bbox) %>%
addPolygons(data=bbox.veneto) %>%
addPolygons(data=bbox.friuli)
bbox.friuli
bbox.friuli$multipolygon
poly <- leaflet() %>%
addTiles()%>%
addPolygons(data=bbox) %>%
addPolygons(data=bbox.veneto) %>%
addPolygons(data=bbox.friuli$multipolygon)
poly
